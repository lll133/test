<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <!-- 引入vue框架 -->
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <style>
        .red {
            color: red;
        }

        .thin {
            font-weight: 200;
        }

        .italic {
            font-style: italic;
        }

        .a {
            letter-spacing: 0.5em;
        }
    </style>
</head>

<body>
    <div id="test">
        <!-- 直接使用msg可以在括号前后添加其它文字 -->
        <p>{{ msg }}！</p>
        <!-- v-text无法添加其他文字文字 -->
        <p v-text='msg'></p>
        <!-- v-html用于添加网页内容 -->
        <p v-html='msg2'></p>
        <!-- v-bind提供用于绑定属性的指令，可以缩写为':',内容可添加其他文字,v-on执行方法，方法需要在methods中定义，缩写为@ -->
        <input type="button" :value="msg" v-bind:title="msg + 'hhh'" @click="show">
        <input type="button" :value="roll" @click="start">
        <input type="button" :value="end" @click="stop">
        <!-- v-on存在修饰符，在@click后添加 -->
        <!-- .once:事件只触发一次 -->
        <!-- .capture:优先触发事件 -->
        <!-- .prevent:阻止默认行为 -->
        <!-- .stop和.self都可以在嵌套时阻止触发其它事件，区别是stop点击自己阻止其它事件，self点击其它事件阻止自己触发 -->
        <br />
        <input type="text" v-model="n1">
        <select v-model="opt">
            <option value="+">+</option>
            <option value="-">-</option>
            <option value="*">*</option>
            <option value="/">/</option>
        </select>
        <input type="text" v-model="n2">
        <input type="button" value="=" @click="cal">
        <input type="text" v-model="result" readonly="readonly">
        <!-- v-class和v-style中的vue数据不需要添加引号 -->
        <div :class="['red',{classobj:true},flag?'italic':'a']">vue添加多个class，可加入判断，用true和false决定标签是否有效</div>
        <div :style="[styleobj1,styleobj2]">vue通过data中的数据设置style</div>
        <!-- v-for循环例子，使用v-for时，如果有问题，需指定唯一的数字类型:key值 -->
        <p v-for="(item,i) in list1">索引:{{i}}——数字:{{item}}</p>
        <p v-for="number in 4">第{{number}}次v-for直接数字循环；</p>
        <p v-for="(val,key,i) in student">v-for集合中val在前，key在后，i为索引{{key}}---{{val}}---{{i}}</p>
        <p v-for="s in student2">v-for也可以使用常见的var.key方法，学生id：{{s.id}}，学生姓名：{{s.name}}</p>
        <!-- v-if每次都会删除或创建元素，v-show仅仅切换是否显示，频繁切换请使用v-show -->
        <p v-if="f">v-if控制元素</p>
        <p v-show="f">v-show控制元素</p>
        <input type="button" value="v-if和show" @click="f=!f"></input>
    </div>
    <script>
        var t = new Vue({
            // 控制页面哪个区域，el为element缩写
            el: '#test',
            data: {
                // data存放el所需的数据
                msg: 'hello world',
                msg2: '<h1>v-html例子</h1>',
                roll: '滚动',
                end: '停',
                timer: null,
                n1: 0,
                n2: 0,
                opt: "+",
                result: 0,
                list1:[1,2,3],
                student:{
                    id:1,
                    name:'stone',
                    sex:'male'
                },
                student2:[
                    {id:1,name:"a"},
                    {id:2,name:"b"},
                    {id:3,name:"c"}],
                classobj: { thin: true },
                styleobj1: { color: 'red' },
                styleobj2: { 'font-style': 'italic' },
                flag: true,
                f:true
            },
            methods: {
                show() {
                    alert('hello');
                },
                start() {
                    if (this.timer) return;
                    this.timer = setInterval(() => {
                        var x = this.msg.substring(0, 1);
                        var y = this.msg.substring(1);
                        this.msg = y + x;
                    }, 500);
                },
                stop() {
                    clearInterval(this.timer);
                    this.timer = null;
                },
                cal() {
                    switch (this.opt) {
                        case "+":
                            this.result = parseInt(this.n1) + parseInt(this.n2)
                            break;
                        case "-":
                            this.result = parseInt(this.n1) - parseInt(this.n2)
                            break;
                        case "*":
                            this.result = parseInt(this.n1) * parseInt(this.n2)
                            break;
                        case "/":
                            this.result = parseInt(this.n1) / parseInt(this.n2)
                            break;
                    }
                }
            }
        })
    </script>
</body>

</html>
